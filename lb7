using Moq;
using TestingLib.Shop;

namespace UnitTesting
{
    public class ShopTest
    {
        private readonly Mock<ICustomerRepository> mockCustomerRepository;
        private readonly Mock<IOrderRepository> mockOrderRepository;
        private readonly Mock<INotificationService> mockNotificationService;
        private readonly ShopService shopService;

        public ShopTest()
        {
            mockCustomerRepository = new Mock<ICustomerRepository>();
            mockOrderRepository = new Mock<IOrderRepository>();
        }

        [Fact]
        public void CreateOrder_ShouldAddOrder()
        {
            var customer = new Customer { Id = 1, Name = "лох", Email = "лох" };
            var order = new Order { Id = 1, Amount = 100, Customer = customer };

            mockOrderRepository.Setup(repo => repo.AddOrder(order));
            mockCustomerRepository.Setup(repo => repo.AddCustomer(customer));
            mockNotificationService.Setup(repo => repo.SendNotification(customer.Email, "add"));

            var service = new ShopService(mockCustomerRepository.Object, mockOrderRepository.Object, mockNotificationService.Object);

            service.CreateOrder(order);

        }

        [Fact]
        public void GetCustomerInfo_ShouldReturnCorrectInfo()
        {
            var customer = new Customer { Id = 1, Name = "лох", Email = "лох" };
            var orders = new List<Order> { new Order { Id = 1, Customer = customer, Amount = 100 }, new Order { Customer = customer} };

            mockCustomerRepository.Setup(repo => repo.GetCustomerById(orders));
        }
    }
}
